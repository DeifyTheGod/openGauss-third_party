===========================
OpenSSL binarylib 编译指导
===========================
1) 需要预先安装zlib库，我们默认代码库里有，一般都会预先安装。
2) 准备一个干净的安装目录，例如：/tmp/openssl
3) 解压openssl-1.1.1a.tar.gz，进入到解压后的openssl-1.1.1a目录下
4) 编译.so文件需要使用-fPIC等安全编译选项，执行如下步骤：
    @ ./config -fPIC -shared -fstack-protector-strong -g -O2 -Wl,-z,relro,-z,now,-z,noexecstack --prefix=/tmp/openssl --openssldir=/tmp/openssl
    @ make -sj
    @ make -sj install
5) 将生成的.so文件（lib目录下）拷贝到binarylibs下指定的目录替换原有.so文件
6) 如果libcrypto.so和libssl.so是symbolic link，则使用readlink解析成普通文件，否则cm编译将失败（实际应该兼容编译试用软连接，具体原因不清楚）
7) 编译.a文件和二进制文件需要使用-fPIE等安全编译选项，执行如下步骤：
    @ 修改Configure，删掉rpath
    @ ./config -fPIE -pie -shared -g -O2 -Wl,-z,relro,-z,now -fstack-protector-strong --prefix=/tmp/openssl --openssldir=/tmp/openssl
    @ 修改Makefile中，删除掉DSO_CFLAGS的-fPIC
    @ make -sj
    @ make install -sj
8) 重命名/tmp/openssl/lib/libcrypto.a和libssl.a重命名为 libcrypto_static.a 和 libssl_static.a，并拷贝到binarylibs对应的目录下对原有.a文件进行替换
9) 将/tmp/openssl/bin目录和include目录下的内容拷贝到 binarylibs下的对应目录对原有文件进行替换


保险起见，使用readelf检查.a和.so文件，确认文件有效，使用binscope检查.so和二进制文件，确认安全编译通过。
Q: ARM平台生成的.so文件大小为空？
A：直接使用make生成的.so文件（make install的问题，原因不详）。


=====================
OpenSSL 补丁打入方法
=====================
方法一:
进入到解压的openssl-1.1.1a目录，并将.patch文件拷贝进来，使用patch命令打入
    $ patch -p1 < 0001-Fix-five-known-security-vulnerabilities.patch

方法二：
进入到解压的openssl-1.1.1a目录，创建本地git仓库，并将全部文件添加到本地仓库中，接着依次（若有多个）打入patch，参考步骤：
    $ git init
    $ git add .
    $ git commit
    $ git am 0001-Fix-five-known-security-vulnerabilities.patch
