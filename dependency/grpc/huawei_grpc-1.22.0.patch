diff --git a/Makefile b/Makefile
index d80d72b..856014d 100644
--- a/Makefile
+++ b/Makefile
@@ -300,37 +300,37 @@ else
 TMPOUT = `mktemp /tmp/test-out-XXXXXX`
 endif
 
-CHECK_NO_CXX14_COMPAT_WORKS_CMD = $(CC) -std=c++11 -Werror -Wno-c++14-compat -o $(TMPOUT) -c test/build/no-c++14-compat.cc
+CHECK_NO_CXX14_COMPAT_WORKS_CMD = $(CC) -std=c++11  -Wno-c++14-compat -o $(TMPOUT) -c test/build/no-c++14-compat.cc
 HAS_WORKING_NO_CXX14_COMPAT = $(shell $(CHECK_NO_CXX14_COMPAT_WORKS_CMD) 2> /dev/null && echo true || echo false)
 ifeq ($(HAS_WORKING_NO_CXX14_COMPAT),true)
 W_NO_CXX14_COMPAT=-Wno-c++14-compat
 endif
 
-CHECK_SHADOW_WORKS_CMD = $(CC) -std=c99 -Werror -Wshadow -o $(TMPOUT) -c test/build/shadow.c
+CHECK_SHADOW_WORKS_CMD = $(CC) -std=c99  -Wshadow -o $(TMPOUT) -c test/build/shadow.c
 HAS_WORKING_SHADOW = $(shell $(CHECK_SHADOW_WORKS_CMD) 2> /dev/null && echo true || echo false)
 ifeq ($(HAS_WORKING_SHADOW),true)
 W_SHADOW=-Wshadow
 NO_W_SHADOW=-Wno-shadow
 endif
-CHECK_EXTRA_SEMI_WORKS_CMD = $(CC) -std=c99 -Werror -Wextra-semi -o $(TMPOUT) -c test/build/extra-semi.c
+CHECK_EXTRA_SEMI_WORKS_CMD = $(CC) -std=c99  -Wextra-semi -o $(TMPOUT) -c test/build/extra-semi.c
 HAS_WORKING_EXTRA_SEMI = $(shell $(CHECK_EXTRA_SEMI_WORKS_CMD) 2> /dev/null && echo true || echo false)
 ifeq ($(HAS_WORKING_EXTRA_SEMI),true)
 W_EXTRA_SEMI=-Wextra-semi
 NO_W_EXTRA_SEMI=-Wno-extra-semi
 endif
-CHECK_NO_SHIFT_NEGATIVE_VALUE_WORKS_CMD = $(CC) -std=c99 -Werror -Wno-shift-negative-value -o $(TMPOUT) -c test/build/no-shift-negative-value.c
+CHECK_NO_SHIFT_NEGATIVE_VALUE_WORKS_CMD = $(CC) -std=c99  -Wno-shift-negative-value -o $(TMPOUT) -c test/build/no-shift-negative-value.c
 HAS_WORKING_NO_SHIFT_NEGATIVE_VALUE = $(shell $(CHECK_NO_SHIFT_NEGATIVE_VALUE_WORKS_CMD) 2> /dev/null && echo true || echo false)
 ifeq ($(HAS_WORKING_NO_SHIFT_NEGATIVE_VALUE),true)
 W_NO_SHIFT_NEGATIVE_VALUE=-Wno-shift-negative-value
 NO_W_NO_SHIFT_NEGATIVE_VALUE=-Wshift-negative-value
 endif
-CHECK_NO_UNUSED_BUT_SET_VARIABLE_WORKS_CMD = $(CC) -std=c99 -Werror -Wno-unused-but-set-variable -o $(TMPOUT) -c test/build/no-unused-but-set-variable.c
+CHECK_NO_UNUSED_BUT_SET_VARIABLE_WORKS_CMD = $(CC) -std=c99  -Wno-unused-but-set-variable -o $(TMPOUT) -c test/build/no-unused-but-set-variable.c
 HAS_WORKING_NO_UNUSED_BUT_SET_VARIABLE = $(shell $(CHECK_NO_UNUSED_BUT_SET_VARIABLE_WORKS_CMD) 2> /dev/null && echo true || echo false)
 ifeq ($(HAS_WORKING_NO_UNUSED_BUT_SET_VARIABLE),true)
 W_NO_UNUSED_BUT_SET_VARIABLE=-Wno-unused-but-set-variable
 NO_W_NO_UNUSED_BUT_SET_VARIABLE=-Wunused-but-set-variable
 endif
-CHECK_NO_MAYBE_UNINITIALIZED_WORKS_CMD = $(CC) -std=c99 -Werror -Wno-maybe-uninitialized -o $(TMPOUT) -c test/build/no-maybe-uninitialized.c
+CHECK_NO_MAYBE_UNINITIALIZED_WORKS_CMD = $(CC) -std=c99  -Wno-maybe-uninitialized -o $(TMPOUT) -c test/build/no-maybe-uninitialized.c
 HAS_WORKING_NO_MAYBE_UNINITIALIZED = $(shell $(CHECK_NO_MAYBE_UNINITIALIZED_WORKS_CMD) 2> /dev/null && echo true || echo false)
 ifeq ($(HAS_WORKING_NO_MAYBE_UNINITIALIZED),true)
 W_NO_MAYBE_UNINITIALIZED=-Wno-maybe-uninitialized
@@ -347,15 +347,15 @@ HOST_CXX ?= $(CXX)
 HOST_LD ?= $(LD)
 HOST_LDXX ?= $(LDXX)
 
-CFLAGS += -std=c99 -Wsign-conversion -Wconversion $(W_SHADOW) $(W_EXTRA_SEMI)
+CFLAGS += -std=c99 -Wsign-conversion -Wconversion $(W_SHADOW) $(W_EXTRA_SEMI) -fPIC -fstack-protector-all -s
 CXXFLAGS += -std=c++11
 ifeq ($(SYSTEM),Darwin)
 CXXFLAGS += -stdlib=libc++
 endif
 CXXFLAGS += -Wnon-virtual-dtor
-CPPFLAGS += -g -Wall -Wextra -Werror -Wno-long-long -Wno-unused-parameter -DOSATOMIC_USE_INLINED=1 -Wno-deprecated-declarations -Ithird_party/nanopb -DPB_FIELD_32BIT
+CPPFLAGS += -D_GLIBCXX_USE_CXX11_ABI=0 -g -Wall -Wextra  -Wno-long-long -Wno-unused-parameter -DOSATOMIC_USE_INLINED=1 -fPIC -fstack-protector-all -s -Wno-deprecated-declarations -Ithird_party/nanopb -DPB_FIELD_32BIT
 COREFLAGS += -fno-rtti -fno-exceptions
-LDFLAGS += -g
+LDFLAGS += -g -Wl,-z,relro,-z,now -static-libstdc++
 
 CPPFLAGS += $(CPPFLAGS_$(CONFIG))
 CFLAGS += $(CFLAGS_$(CONFIG))
@@ -422,7 +422,7 @@ ifneq ($(prefix),/usr)
 # safe, and solves problems seen in the wild.  Note that $ORIGIN
 # is a literal string interpreted much later by ld.so.  Escape it
 # here with a dollar sign so Make doesn't expand $O.
-LDFLAGS += '-Wl,-rpath,$$ORIGIN'
+# LDFLAGS += '-Wl,-rpath,$$ORIGIN'
 endif
 endif
 
@@ -769,7 +769,7 @@ CPPFLAGS := $(shell $(PKG_CONFIG) --cflags openssl) $(CPPFLAGS)
 LDFLAGS_OPENSSL_PKG_CONFIG = $(shell $(PKG_CONFIG) --libs-only-L openssl)
 ifeq ($(SYSTEM),Linux)
 ifneq ($(LDFLAGS_OPENSSL_PKG_CONFIG),)
-LDFLAGS_OPENSSL_PKG_CONFIG += $(shell $(PKG_CONFIG) --libs-only-L openssl | sed s/L/Wl,-rpath,/)
+LDFLAGS_OPENSSL_PKG_CONFIG += $(shell $(PKG_CONFIG) --libs-only-L openssl)
 endif # LDFLAGS_OPENSSL_PKG_CONFIG=''
 endif # System=Linux
 LDFLAGS := $(LDFLAGS_OPENSSL_PKG_CONFIG) $(LDFLAGS)
@@ -835,7 +835,7 @@ CPPFLAGS := $(CPPFLAGS) $(shell $(PKG_CONFIG) --cflags protobuf)
 LDFLAGS_PROTOBUF_PKG_CONFIG = $(shell $(PKG_CONFIG) --libs-only-L protobuf)
 ifeq ($(SYSTEM),Linux)
 ifneq ($(LDFLAGS_PROTOBUF_PKG_CONFIG),)
-LDFLAGS_PROTOBUF_PKG_CONFIG += $(shell $(PKG_CONFIG) --libs-only-L protobuf | sed s/L/Wl,-rpath,/)
+LDFLAGS_PROTOBUF_PKG_CONFIG += $(shell $(PKG_CONFIG) --libs-only-L protobuf)
 endif
 endif
 else
@@ -1377,7 +1377,7 @@ third_party/protobuf/configure:
 $(LIBDIR)/$(CONFIG)/protobuf/libprotobuf.a: third_party/protobuf/configure
 	$(E) "[MAKE]    Building protobuf"
 	$(Q)mkdir -p $(LIBDIR)/$(CONFIG)/protobuf
-	$(Q)(cd third_party/protobuf ; CC="$(CC)" CXX="$(CXX)" LDFLAGS="$(LDFLAGS_$(CONFIG)) -g $(PROTOBUF_LDFLAGS_EXTRA)" CPPFLAGS="$(PIC_CPPFLAGS) $(CPPFLAGS_$(CONFIG)) -g $(PROTOBUF_CPPFLAGS_EXTRA)" ./configure --disable-shared --enable-static $(PROTOBUF_CONFIG_OPTS))
+	$(Q)(cd third_party/protobuf ; CC="$(CC)" CXX="$(CXX)" LDFLAGS="$(LDFLAGS_$(CONFIG)) -g $(PROTOBUF_LDFLAGS_EXTRA)" CPPFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0 $(PIC_CPPFLAGS) $(CPPFLAGS_$(CONFIG)) -g $(PROTOBUF_CPPFLAGS_EXTRA)" ./configure --disable-rpath --disable-shared --enable-static $(PROTOBUF_CONFIG_OPTS))
 	$(Q)$(MAKE) -C third_party/protobuf clean
 	$(Q)$(MAKE) -C third_party/protobuf
 	$(Q)mkdir -p $(BINDIR)/$(CONFIG)/protobuf
diff --git a/include/grpc/impl/codegen/port_platform.h b/include/grpc/impl/codegen/port_platform.h
index d7294d5..108e154 100644
--- a/include/grpc/impl/codegen/port_platform.h
+++ b/include/grpc/impl/codegen/port_platform.h
@@ -179,7 +179,7 @@
 #else /* _LP64 */
 #define GPR_ARCH_32 1
 #endif /* _LP64 */
-#ifdef __GLIBC__
+#if __GLIBC__ > 2 && __GLIBC_MINOR__ >= 12
 #define GPR_POSIX_CRASH_HANDLER 1
 #define GPR_LINUX_PTHREAD_NAME 1
 #include <linux/version.h>
diff --git a/include/grpcpp/server_builder_impl.h b/include/grpcpp/server_builder_impl.h
index 7f85e80..75a0be0 100644
--- a/include/grpcpp/server_builder_impl.h
+++ b/include/grpcpp/server_builder_impl.h
@@ -223,6 +223,10 @@ class ServerBuilder {
 
   ServerBuilder& SetOption(std::unique_ptr<grpc::ServerBuilderOption> option);
 
+  /// Set callback cleanup function for work thread quit
+  ServerBuilder& SetThreadCleanupFunc(const std::function<void()>& func);
+  std::function<void()> thread_cleanup_func_;
+
   /// Options for synchronous servers.
   enum SyncServerOption {
     NUM_CQS,         ///< Number of completion queues.
diff --git a/include/grpcpp/server_impl.h b/include/grpcpp/server_impl.h
index 90019e2..cd59bcb 100644
--- a/include/grpcpp/server_impl.h
+++ b/include/grpcpp/server_impl.h
@@ -157,6 +157,9 @@ class Server : public grpc::ServerInterface, private grpc::GrpcLibraryCodegen {
   int AddListeningPort(const grpc::string& addr,
                        grpc::ServerCredentials* creds) override;
 
+  /// Set work thread cleanup function
+  void SetThreadCleanupFunc(const std::function<void()>& func);
+
   /// NOTE: This is *NOT* a public API. The server constructors are supposed to
   /// be used by \a ServerBuilder class only. The constructor will be made
   /// 'private' very soon.
diff --git a/include/gs_openssl_decoder.h b/include/gs_openssl_decoder.h
new file mode 100644
index 0000000..704fc3d
--- /dev/null
+++ b/include/gs_openssl_decoder.h
@@ -0,0 +1,80 @@
+/*-------------------------------------------------------------------------
+ *
+ * Copyright (C), 2012-2017, Huawei Tech. Co., Ltd.
+ *
+ *-------------------------------------------------------------------------
+ * File Name	: gs_openssl_server.h
+ * Brief		:
+ * Description	: OpenSSL Server API
+ *
+ * History	: 2017-6
+ *
+ *-------------------------------------------------------------------------
+ */
+
+#ifndef GS_OPENSSL_DECODER
+#define GS_OPENSSL_DECODER
+
+#include <fcntl.h>
+
+#ifndef WIN32
+#include <unistd.h>
+#endif
+
+#include <sys/stat.h>
+
+#include <openssl/crypto.h>
+#include <openssl/evp.h>
+#include <openssl/ssl.h>
+#include <openssl/rand.h>
+#include <openssl/err.h>
+#include <assert.h>
+
+#include<string.h>
+
+typedef unsigned int uint32;
+
+#define ossl_free(p) free(p)
+#define ossl_malloc(n) malloc(n)
+#define ossl_assert(s) assert(s)
+
+#define MAXPGPATH 1024
+#ifdef WIN32
+#define MAXPGPATH _MAX_PATH
+#endif
+
+#define OSSL_CIPHER_KEY_FILE ".key.cipher"
+#define OSSL_RAN_KEY_FILE ".key.rand"
+
+/* AES128 will be used, so each block is 16 bytes. */
+#define OSSL_CIPHER_LEN 16
+#define OSSL_MAX_ERR_LEN (400)
+
+/* see:
+ * unsigned long ERR_get_error(void)
+ */
+typedef unsigned long ossl_ecode;
+
+enum gs_openssl_err {
+    ERR_OK = 0,
+    ERR_INIT_OPENSSL_LIB,
+    ERR_RAND_POLL,
+    ERR_SSLCTX,
+    ERR_OOM,
+    ERR_IO,
+    ERR_FILE_NOT_EXIST,
+    ERR_ROOT_CA,
+    ERR_CA_CERT,
+    ERR_PRIVATE_KEY,
+    ERR_CIPHER,
+    ERR_DECRYPT,
+    ERR_DIGEST,
+    ERR_PASSWD_TOO_LONG,
+    ERR_PADDING_MODE,
+    ERR_GET_DH,
+    ERR_SET_TEM_DH
+};
+
+
+
+#endif /* GS_OPENSSL_DECODER */
diff --git a/src/core/lib/security/security_connector/ssl_utils.cc b/src/core/lib/security/security_connector/ssl_utils.cc
index cb0d543..95451d0 100644
--- a/src/core/lib/security/security_connector/ssl_utils.cc
+++ b/src/core/lib/security/security_connector/ssl_utils.cc
@@ -76,9 +76,7 @@ static const char* cipher_suites = nullptr;
 // All cipher suites for default are compliant with HTTP2.
 GPR_GLOBAL_CONFIG_DEFINE_STRING(
     grpc_ssl_cipher_suites,
-    "ECDHE-ECDSA-AES128-GCM-SHA256:"
     "ECDHE-ECDSA-AES256-GCM-SHA384:"
-    "ECDHE-RSA-AES128-GCM-SHA256:"
     "ECDHE-RSA-AES256-GCM-SHA384",
     "A colon separated list of cipher suites to use with OpenSSL")
 
diff --git a/src/core/tsi/ssl_transport_security.cc b/src/core/tsi/ssl_transport_security.cc
old mode 100644
new mode 100755
index 25ae2ce..b171ab9
--- a/src/core/tsi/ssl_transport_security.cc
+++ b/src/core/tsi/ssl_transport_security.cc
@@ -21,6 +21,7 @@
 #include "src/core/tsi/grpc_shadow_boringssl.h"
 
 #include "src/core/tsi/ssl_transport_security.h"
+#include "gs_openssl_decoder.h"
 
 #include <limits.h>
 #include <string.h>
@@ -54,6 +55,7 @@ extern "C" {
 #include "src/core/tsi/ssl/session_cache/ssl_session_cache.h"
 #include "src/core/tsi/ssl_types.h"
 #include "src/core/tsi/transport_security.h"
+#include "gs_openssl_decoder.h"
 
 /* --- Constants. ---*/
 
@@ -183,6 +185,7 @@ static void init_openssl(void) {
   GPR_ASSERT(g_ssl_ctx_ex_factory_index != -1);
 }
 
+static int ossl_cipher_decode_files(const char* datadir, unsigned char* plainpwd);
 /* --- Ssl utils. ---*/
 
 static const char* ssl_error_string(int error) {
@@ -555,7 +558,7 @@ static tsi_result ssl_ctx_use_certificate_chain(SSL_CTX* context,
 
 /* Loads an in-memory PEM private key into the SSL context. */
 static tsi_result ssl_ctx_use_private_key(SSL_CTX* context, const char* pem_key,
-                                          size_t pem_key_size) {
+                                          size_t pem_key_size, const char* password) {
   tsi_result result = TSI_OK;
   EVP_PKEY* private_key = nullptr;
   BIO* pem;
@@ -563,7 +566,7 @@ static tsi_result ssl_ctx_use_private_key(SSL_CTX* context, const char* pem_key,
   pem = BIO_new_mem_buf((void*)pem_key, static_cast<int>(pem_key_size));
   if (pem == nullptr) return TSI_OUT_OF_RESOURCES;
   do {
-    private_key = PEM_read_bio_PrivateKey(pem, nullptr, nullptr, (void*)"");
+    private_key = PEM_read_bio_PrivateKey(pem, nullptr, nullptr, (void*)password);
     if (private_key == nullptr) {
       result = TSI_INVALID_ARGUMENT;
       break;
@@ -661,12 +664,55 @@ static tsi_result ssl_ctx_load_verification_certs(SSL_CTX* context,
                                root_name);
 }
 
+static bool GetCertEnv(const char* envName, char* outputEnvStr, size_t envValueLen)
+{
+    char* envValue = NULL;
+    const char *dangerCharacterList[] = {"|", ";", "&", "$", "<", ">", "`", "\\", "'", "\"", "{", "}", "(", ")", "[", "]", "~", "*", "?", "!", "\n", NULL};
+    int index = 0;
+    if (envName == NULL) {
+        return false;
+    }
+
+    envValue = getenv(envName);
+    if (envValue == NULL) {
+        return false;
+    }
+
+    size_t len = strlen(envValue);
+    if ((envValue[0] == '\0') || len >= envValueLen) {
+        return false;
+    }
+
+    for (; dangerCharacterList[index] != NULL; index++) {
+        if (strstr(envValue, dangerCharacterList[index]) != NULL) {
+            return false;
+        }
+    }
+
+    strncpy(outputEnvStr, envValue, len);
+    outputEnvStr[len] = 0;
+    return true;
+}
+
 /* Populates the SSL context with a private key and a cert chain, and sets the
    cipher list and the ephemeral ECDH key. */
 static tsi_result populate_ssl_context(
     SSL_CTX* context, const tsi_ssl_pem_key_cert_pair* key_cert_pair,
     const char* cipher_list) {
   tsi_result result = TSI_OK;
+
+  char gaussHome[1024];
+  char pass[1024];
+  if(!GetCertEnv("GAUSSHOME", gaussHome, 1024)) {
+        gpr_log(GPR_ERROR, "Invalid env GAUSSHOME.");
+        return TSI_UNKNOWN_ERROR;
+  }
+  if(ossl_cipher_decode_files(gaussHome, (unsigned char *)pass) != 0) {
+     gpr_log(GPR_ERROR, "decode pass error.");
+     return TSI_UNKNOWN_ERROR;
+  }
+  SSL_CTX_set_default_passwd_cb_userdata(context, pass);
+
   if (key_cert_pair != nullptr) {
     if (key_cert_pair->cert_chain != nullptr) {
       result = ssl_ctx_use_certificate_chain(context, key_cert_pair->cert_chain,
@@ -678,7 +724,7 @@ static tsi_result populate_ssl_context(
     }
     if (key_cert_pair->private_key != nullptr) {
       result = ssl_ctx_use_private_key(context, key_cert_pair->private_key,
-                                       strlen(key_cert_pair->private_key));
+                                       strlen(key_cert_pair->private_key), pass);
       if (result != TSI_OK || !SSL_CTX_check_private_key(context)) {
         gpr_log(GPR_ERROR, "Invalid private key.");
         return result != TSI_OK ? result : TSI_INVALID_ARGUMENT;
@@ -1971,3 +2017,323 @@ const tsi_ssl_handshaker_factory_vtable* tsi_ssl_handshaker_factory_swap_vtable(
   factory->vtable = new_vtable;
   return orig_vtable;
 }
+
+/* ossl_ecode type. 0 means no error. */
+#define OSSL_OK 0
+
+/* return value of OPENSSL functions
+ * 1 means success; 0 means failing.
+ */
+#define OPENSSL_RET_OK 1
+#define OPENSSL_RET_FAIL 0
+
+/* ERR_error_string() generates a human-readable string
+ * representing the error code e, and places it at buf. buf must be
+ * at least 256 bytes long.
+ * gs_openssl_server size shouldn't be too big, for example less than
+ * 512, so we choose 400 bytes.
+ */
+
+#define OSSL_ITERATE_TIMES 10000
+#define OSSL_RANDOM_LEN 16
+
+
+/* cipher key data */
+typedef struct {
+    unsigned char cipherkey[OSSL_CIPHER_LEN + 1];
+	unsigned char keysalt[OSSL_RANDOM_LEN + 1];
+    unsigned char vector[OSSL_RANDOM_LEN + 1];
+    uint32 crc;
+} cipher_key;
+
+/* random key data */
+typedef struct {
+    char rand[OSSL_CIPHER_LEN + 1];
+    uint32 crc;
+} ossl_rand_key;
+
+
+#define EOK 0
+static bool ossl_cipher_file_exists(const char* file);
+static void ossl_cipher_cipher_clear_keyfile(cipher_key* key);
+static bool ossl_cipher_load_key(
+    const char* cipherkeyfile, const char* randfile, cipher_key* cipher, ossl_rand_key* rand);
+
+/*
+ * @Description: remove padding char from plain text.
+ *    this plain text must be padding with ISO/IEC 7816-4 mode
+ * @IN len: valid length of this plain text
+ * @IN plain: plain text
+ * @Return: ERR_PADDING_MODE, padding mode is wrong; ERR_OK
+ * @See also:
+ */
+static int ossl_IEC_remove_padding_char(unsigned char* plain, int* len)
+{
+    /* see https://en.wikipedia.org/wiki/Padding_(cryptography)#Block_cipher_mode_of_operation
+     *
+     * here *ISO/IEC 7816-4* padding method is adoptted.
+     * Example: In the following example the block size is 8 bytes and padding is required for 4 bytes
+     *	... | DD DD DD DD DD DD DD DD | DD DD DD DD 80 00 00 00 |
+     * The next example shows a padding of just one byte
+     *	... | DD DD DD DD DD DD DD DD | DD DD DD DD DD DD DD 80 |
+     */
+    const unsigned char ch = 0x80;
+    const int ll = *len - 1;
+    int err = ERR_PADDING_MODE;
+
+    /* scan backforward */
+    for (int i = ll; i >= 0; --i) {
+        if (ch == plain[i]) {
+            plain[i] = '\0'; /* make it C string */
+            *len = i;        /* update C string length */
+            err = ERR_OK;
+            break;
+        } else if (0 != plain[i]) {
+            /* all chars after special 0x80 should be 0. */
+            break;
+        }
+    }
+    return err;
+}
+
+
+static int ossl_decrypt_aes128_cbc(
+    unsigned char* cipher, int cipher_len, unsigned char* key, unsigned char* iv, unsigned char* plain)
+{
+
+    EVP_CIPHER_CTX* ctx = NULL;
+
+    /* double space, so it's enough */
+    unsigned char buf[OSSL_CIPHER_LEN * 2] = {0};
+    unsigned char* p = buf;
+    int plain_len = 0;
+    int len = 0;
+    int ret = ERR_OK;
+   
+    /* create an cipher context */
+    if ((ctx = EVP_CIPHER_CTX_new()) == NULL) {
+        return ERR_OOM;
+    }
+
+    /*
+     * IMPORTANT - ensure you use a key and IV size appropriate for your cipher
+     * In this example we are using 128 bit AES (i.e. a 128 bit key). The
+     * IV size for *most* modes is the same as the block size. For AES this
+     * is 128 bits
+     */
+
+    /* AES with a 128-bit key in CBC */
+    const EVP_CIPHER* type = EVP_aes_128_cbc();
+
+    /* sets up cipher context ctx for decryption with cipher type */
+    if (OPENSSL_RET_OK != EVP_DecryptInit_ex(ctx, type, NULL, key, iv)) {
+        ret = ERR_DECRYPT;
+        goto cleanup;
+    }
+
+    /* EVP_CIPHER_CTX_set_padding() always returns 1.
+     * disable padding mode.
+     */
+    (void)EVP_CIPHER_CTX_set_padding(ctx, 0);
+
+    /* obtain the plain output */
+    if (OPENSSL_RET_OK != EVP_DecryptUpdate(ctx, p, &len, cipher, cipher_len)) {
+        ret = ERR_DECRYPT;
+        goto cleanup;
+    }
+
+    plain_len = len;
+    p += len;
+    len = 0;
+
+    if (OPENSSL_RET_OK != EVP_DecryptFinal_ex(ctx, p, &len)) {
+        ret = ERR_DECRYPT;
+        goto cleanup;
+    }
+
+    /* remember the length of plain password text */
+    plain_len += len;
+    if (plain_len > OSSL_CIPHER_LEN || plain_len <= 0) {
+        ret = ERR_PASSWD_TOO_LONG;
+        goto cleanup;
+    }
+
+    if (ERR_OK != ossl_IEC_remove_padding_char(buf, &plain_len)) {
+        ret = ERR_PADDING_MODE;
+        goto cleanup;
+    }
+
+    /* get the password copy */
+    memcpy(plain, buf, plain_len);
+    //ossl_securec_check(rc);
+    plain[plain_len] = '\0';
+
+cleanup:
+
+    EVP_CIPHER_CTX_free(ctx);
+    memset((char*)buf, 0, OSSL_CIPHER_LEN * 2);
+    //ossl_securec_check(rc);
+    return ret;
+}
+
+/*
+ * @Description:
+ * @IN cipher_key: cipher key
+ * @IN cipher_key_len: cipher key length
+ * @IN dv: decrypt vector
+ * @IN iv: init vector
+ * @IN plain: plain text
+ * @IN rand_key: random key
+ * @Return:
+ * @See also:
+ */
+static int ossl_cipher_decrypt_input_key(unsigned char* cipher_key, int cipher_key_len, const char* rand_key,
+    unsigned char* iv, unsigned char* dv, unsigned char* plain)
+{
+    int retval = 0;
+    unsigned char decrypt_key[OSSL_RANDOM_LEN + 1] = {0};
+
+    const EVP_MD* digest = EVP_sha256();
+    if (NULL == digest) {
+        return ERR_DIGEST;
+    }
+
+    /* get the decrypt key value.
+     * derives a key from a password using a salt and
+     * iteration count as specified in RFC 2898
+     */
+    retval = PKCS5_PBKDF2_HMAC(
+        rand_key, OSSL_RANDOM_LEN, iv, OSSL_RANDOM_LEN, OSSL_ITERATE_TIMES, digest, OSSL_RANDOM_LEN, decrypt_key);
+    if (OPENSSL_RET_OK != retval) {
+        memset((char*)decrypt_key, 0, OSSL_RANDOM_LEN + 1);
+        // securec_check(rc);
+        return ERR_DIGEST;
+    }
+
+    /* decrypt the cipher */
+    retval = ossl_decrypt_aes128_cbc(cipher_key, cipher_key_len, decrypt_key, dv, plain);
+    memset((char*)decrypt_key, 0, OSSL_RANDOM_LEN + 1);
+    // securec_check(rc);
+    return retval;
+}
+
+/*
+ * @Description : Read the contents of the file to buffer.
+ * @in filename : The file need to be read.
+ * @in content : Buffer to store the content.
+ * @in csize : The file size.
+ * @return		: success 1, failed 0.
+ */
+static bool ossl_read_file(const char* filename, void* content, size_t csize)
+{
+    FILE* pfRead = NULL;
+    int cnt = 0;
+
+    /* open and read file */
+    if ((pfRead = fopen(filename, "rb")) == NULL) {
+        return false;
+    }
+    cnt = fread(content, csize, 1, pfRead);
+    if (cnt < 0) {
+        fclose(pfRead);
+        return false;
+    }
+    if (fclose(pfRead)) {
+        return false;
+    }
+    return true;
+}
+
+/*
+ * @Description : Read random and cipher contents of the file to buffer.
+ * @in cipherkeyfile : The file name of the cipher file.
+ * @in randfile : The file name of the random file.
+ * @in cipher_file_content :The buffer to store the content of  the cipher.
+ * @in rand_file_content :The buffer to store the content of the random salt.
+ * @return		: success 1, failed 0.
+ */
+static bool ossl_cipher_load_key(
+    const char* cipherkeyfile, const char* randfile, cipher_key* cipher_file_content, ossl_rand_key* rand_file_content)
+{
+    /* read key file */
+    if (!ossl_read_file(cipherkeyfile, cipher_file_content, sizeof(cipher_key)) ||
+        !ossl_read_file(randfile, rand_file_content, sizeof(ossl_rand_key))) {
+        return false;
+    }
+    return true;
+}
+
+/*
+ * @Description : reset cipher file content.
+ * @in cipher_file_context : the file need to be cleared.
+ * @return		: void.
+ */
+static void ossl_cipher_cipher_clear_keyfile(cipher_key* key)
+{
+    memset((char*)key->cipherkey, 0, OSSL_CIPHER_LEN + 1);
+    // securec_check(rc);
+    memset((char*)key->keysalt, 0, OSSL_RANDOM_LEN + 1);
+    // securec_check(rc);
+    memset((char*)key->vector, 0, OSSL_RANDOM_LEN + 1);
+    // securec_check(rc);
+}
+
+/*
+ * @Description : decrypt the cipher text to plain text via the stored files
+ * @in datadir : the file path that contains rand file and cipher file.
+ * @in plainpwd : the decrypt password.
+ * @return		: success true, failed false.
+ */
+static int ossl_cipher_decode_files(const char* datadir, unsigned char* plainpwd)
+{
+
+    char cipherkeyfile[MAXPGPATH] = {0x00};
+    char randfile[MAXPGPATH] = {0x00};
+    memset((char *)cipherkeyfile, 0, MAXPGPATH);
+    memset((char *)randfile, 0, MAXPGPATH);
+    ossl_rand_key rand_data;
+    cipher_key cipher_data;
+    int rc = 0;
+
+    /* read the files begin with client, check the files */
+    rc = snprintf(cipherkeyfile, MAXPGPATH - 1, "%s/share/sslcert/grpc/client%s", datadir, OSSL_CIPHER_KEY_FILE);
+    // securec_check_ss(rc);
+    if (!ossl_cipher_file_exists(cipherkeyfile)) {
+        return ERR_FILE_NOT_EXIST;
+    }
+
+    rc = snprintf(randfile, MAXPGPATH - 1, "%s/share/sslcert/grpc/client%s", datadir, OSSL_RAN_KEY_FILE);
+    // securec_check_ss(rc);
+    if (!ossl_cipher_file_exists(randfile)) {
+        return ERR_FILE_NOT_EXIST;
+    }
+
+    /* first,read the cipher file and rand file to buffer */
+    if (!ossl_cipher_load_key(cipherkeyfile, randfile, &cipher_data, &rand_data)) {
+        ossl_cipher_cipher_clear_keyfile(&cipher_data);
+        memset(rand_data.rand, 0, OSSL_CIPHER_LEN + 1);
+        // securec_check(rc);
+        return ERR_IO;
+    }
+
+    rc = ossl_cipher_decrypt_input_key(
+        cipher_data.cipherkey, OSSL_CIPHER_LEN, rand_data.rand, cipher_data.keysalt, cipher_data.vector, plainpwd);
+    if (ERR_OK != rc) {
+        ossl_cipher_cipher_clear_keyfile(&cipher_data);
+        memset(rand_data.rand, 0, OSSL_CIPHER_LEN + 1);
+        // securec_check(rc);
+        return rc;
+    }
+    return ERR_OK;
+}
+
+/* Check the existence of the file */
+static bool ossl_cipher_file_exists(const char* file)
+{
+    FILE* f = fopen(file, "r");
+    if (f == NULL) {
+        return false;
+    }
+    (void)fclose(f);
+    return true;
+}
diff --git a/src/cpp/server/server_builder.cc b/src/cpp/server/server_builder.cc
index 1ba9ae1..22cb91e 100644
--- a/src/cpp/server/server_builder.cc
+++ b/src/cpp/server/server_builder.cc
@@ -43,7 +43,8 @@ static void do_plugin_list_init(void) {
 }
 
 ServerBuilder::ServerBuilder()
-    : max_receive_message_size_(INT_MIN),
+    : thread_cleanup_func_(NULL),
+      max_receive_message_size_(INT_MIN),
       max_send_message_size_(INT_MIN),
       sync_server_settings_(SyncServerSettings()),
       resource_quota_(nullptr) {
@@ -203,6 +204,12 @@ ServerBuilder& ServerBuilder::AddListeningPort(
   return *this;
 }
 
+ServerBuilder& ServerBuilder::SetThreadCleanupFunc(
+    const std::function<void()>& func) {
+  thread_cleanup_func_ = func;
+  return *this;
+}
+
 std::unique_ptr<grpc::Server> ServerBuilder::BuildAndStart() {
   grpc::ChannelArguments args;
   for (auto option = options_.begin(); option != options_.end(); ++option) {
@@ -325,6 +332,8 @@ std::unique_ptr<grpc::Server> ServerBuilder::BuildAndStart() {
       sync_server_settings_.cq_timeout_msec, std::move(acceptors_),
       resource_quota_, std::move(interceptor_creators_)));
 
+  server->SetThreadCleanupFunc(thread_cleanup_func_);
+
   grpc_impl::ServerInitializer* initializer = server->initializer();
 
   // Register all the completion queues with the server. i.e
diff --git a/src/cpp/server/server_cc.cc b/src/cpp/server/server_cc.cc
index 02cfb59..a36bd99 100644
--- a/src/cpp/server/server_cc.cc
+++ b/src/cpp/server/server_cc.cc
@@ -50,7 +50,7 @@
 #include "src/cpp/server/external_connection_acceptor_impl.h"
 #include "src/cpp/server/health/default_health_check_service.h"
 #include "src/cpp/thread_manager/thread_manager.h"
-
+extern std::function <void()> g_thread_cleanup;
 namespace grpc {
 namespace {
 
@@ -1169,6 +1169,10 @@ int Server::AddListeningPort(const grpc::string& addr,
   return port;
 }
 
+void Server::SetThreadCleanupFunc(const std::function <void()>& func) {
+  g_thread_cleanup = func;
+}
+
 void Server::Start(grpc::ServerCompletionQueue** cqs, size_t num_cqs) {
   GPR_ASSERT(!started_);
   global_callbacks_->PreServerStart(this);
diff --git a/src/cpp/thread_manager/thread_manager.cc b/src/cpp/thread_manager/thread_manager.cc
index 2b65352..fa49cab 100644
--- a/src/cpp/thread_manager/thread_manager.cc
+++ b/src/cpp/thread_manager/thread_manager.cc
@@ -20,13 +20,13 @@
 
 #include <climits>
 #include <mutex>
-
+#include <functional>
 #include <grpc/support/log.h>
 #include "src/core/lib/gprpp/thd.h"
 #include "src/core/lib/iomgr/exec_ctx.h"
 
+std::function <void()> g_thread_cleanup;
 namespace grpc {
-
 ThreadManager::WorkerThread::WorkerThread(ThreadManager* thd_mgr)
     : thd_mgr_(thd_mgr) {
   // Make thread creation exclusive with respect to its join happening in
@@ -41,6 +41,10 @@ ThreadManager::WorkerThread::WorkerThread(ThreadManager* thd_mgr)
 void ThreadManager::WorkerThread::Run() {
   thd_mgr_->MainWorkLoop();
   thd_mgr_->MarkAsCompleted(this);
+
+  if (g_thread_cleanup) {
+    g_thread_cleanup();
+  }
 }
 
 ThreadManager::WorkerThread::~WorkerThread() {
diff --git a/src/cpp/thread_manager/thread_manager.h b/src/cpp/thread_manager/thread_manager.h
index 62b1bee..e64a068 100644
--- a/src/cpp/thread_manager/thread_manager.h
+++ b/src/cpp/thread_manager/thread_manager.h
@@ -31,7 +31,6 @@
 #include "src/core/lib/iomgr/resource_quota.h"
 
 namespace grpc {
-
 class ThreadManager {
  public:
   explicit ThreadManager(const char* name, grpc_resource_quota* resource_quota,
